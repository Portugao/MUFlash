<?php
/**
 * MUFlash.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUFlash
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Fri Jan 27 19:27:23 CET 2012.
 */

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for movie entities.
 *
 * @abstract
 */
abstract class MUFlash_Entity_Base_Movie extends Zikula_EntityAccess
{

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'movie';

    /**
     * @var array List of primary key field names
     */
    protected $_idFields = array();

    /**
     * @var MUFlash_Entity_Validator_Movie The validator for this entity
     */
    protected $_validator = null;

    /**
     * @var boolean Whether this entity supports unique slugs
     */
    protected $_hasUniqueSlug = false;

    /**
     * @var array List of available item actions
     */
    protected $_actions = array();



    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id.
     */
    protected $id = 0;


    /**
     * @ORM\Column(length=255, unique=true)
     * @var string $title.
     */
    protected $title = '';


    /**
     * @ORM\Column(length=2000)
     * @var string $description.
     */
    protected $description = '';
    /**
     * Preview meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $previewMeta.
     */
    protected $previewMeta = array();



    /**
     * @ORM\Column(length=255)
     * @var string $preview.
     */
    protected $preview = '';

    /**
     * The full path to the preview.
     *
     * @var string $previewFullPath.
     */
    protected $previewFullPath = '';

    /**
     * Full preview path as url.
     *
     * @var string $previewFullPathUrl.
     */
    protected $previewFullPathUrl = '';
    /**
     * Flash file meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $flashFileMeta.
     */
    protected $flashFileMeta = array();



    /**
     * @ORM\Column(length=255, unique=true)
     * @var string $flashFile.
     */
    protected $flashFile = '';

    /**
     * The full path to the flash file.
     *
     * @var string $flashFileFullPath.
     */
    protected $flashFileFullPath = '';

    /**
     * Full flash file path as url.
     *
     * @var string $flashFileFullPathUrl.
     */
    protected $flashFileFullPathUrl = '';


    /**
     * @ORM\Column(length=255)
     * @var string $backgroundColour.
     */
    protected $backgroundColour = 'ffffff';


    /**
     * @ORM\Column(type="boolean")
     * @var boolean $play.
     */
    protected $play = true;


    /**
     * @ORM\Column(type="boolean")
     * @var boolean $playLoop.
     */
    protected $playLoop = true;


    /**
     * @ORM\Column(length=255)
     * @var string $width.
     */
    protected $width = '';


    /**
     * @ORM\Column(length=255)
     * @var string $height.
     */
    protected $height = '';


    /**
     * @ORM\Column(length=50)
     * @var string $playerVersion.
     */
    protected $playerVersion = '';


    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * @var integer $createdUserId.
     */
    protected $createdUserId;

    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * @var integer $updatedUserId.
     */
    protected $updatedUserId;

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @var datetime $createdDate.
     */
    protected $createdDate;

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="update")
     * @var datetime $updatedDate.
     */
    protected $updatedDate;



    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->id = 1;
        $this->_idFields = array('id');
        $this->initValidator();
        $this->_hasUniqueSlug = false;
    }

    /**
     * Get _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }

    /**
     * Set _object type.
     *
     * @param string $_objectType.
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }


    /**
     * Get _id fields.
     *
     * @return array
     */
    public function get_idFields()
    {
        return $this->_idFields;
    }

    /**
     * Set _id fields.
     *
     * @param array $_idFields.
     *
     * @return void
     */
    public function set_idFields(array $_idFields = Array())
    {
        $this->_idFields = $_idFields;
    }


    /**
     * Get _validator.
     *
     * @return MUFlash_Entity_Validator_Movie
     */
    public function get_validator()
    {
        return $this->_validator;
    }

    /**
     * Set _validator.
     *
     * @param MUFlash_Entity_Validator_Movie $_validator.
     *
     * @return void
     */
    public function set_validator(MUFlash_Entity_Validator_Movie $_validator = null)
    {
        $this->_validator = $_validator;
    }


    /**
     * Get _has unique slug.
     *
     * @return boolean
     */
    public function get_hasUniqueSlug()
    {
        return $this->_hasUniqueSlug;
    }

    /**
     * Set _has unique slug.
     *
     * @param boolean $_hasUniqueSlug.
     *
     * @return void
     */
    public function set_hasUniqueSlug($_hasUniqueSlug)
    {
        $this->_hasUniqueSlug = $_hasUniqueSlug;
    }


    /**
     * Get _actions.
     *
     * @return array
     */
    public function get_actions()
    {
        return $this->_actions;
    }

    /**
     * Set _actions.
     *
     * @param array $_actions.
     *
     * @return void
     */
    public function set_actions(array $_actions = Array())
    {
        $this->_actions = $_actions;
    }



    /**
     * Get id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set id.
     *
     * @param integer $id.
     *
     * @return void
     */
    public function setId($id)
    {
        if ($id != $this->id) {
            $this->id = $id;
        }
    }

    /**
     * Get title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set title.
     *
     * @param string $title.
     *
     * @return void
     */
    public function setTitle($title)
    {
        if ($title != $this->title) {
            $this->title = $title;
        }
    }

    /**
     * Get description.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set description.
     *
     * @param string $description.
     *
     * @return void
     */
    public function setDescription($description)
    {
        if ($description != $this->description) {
            $this->description = $description;
        }
    }

    /**
     * Get preview.
     *
     * @return string
     */
    public function getPreview()
    {
        return $this->preview;
    }

    /**
     * Set preview.
     *
     * @param string $preview.
     *
     * @return void
     */
    public function setPreview($preview)
    {
        if ($preview != $this->preview) {
            $this->preview = $preview;
        }
    }

    /**
     * Get preview full path.
     *
     * @return string
     */
    public function getPreviewFullPath()
    {
        return $this->previewFullPath;
    }

    /**
     * Set preview full path.
     *
     * @param string $previewFullPath.
     *
     * @return void
     */
    public function setPreviewFullPath($previewFullPath)
    {
        if ($previewFullPath != $this->previewFullPath) {
            $this->previewFullPath = $previewFullPath;
        }
    }

    /**
     * Get preview full path url.
     *
     * @return string
     */
    public function getPreviewFullPathUrl()
    {
        return $this->previewFullPathUrl;
    }

    /**
     * Set preview full path url.
     *
     * @param string $previewFullPathUrl.
     *
     * @return void
     */
    public function setPreviewFullPathUrl($previewFullPathUrl)
    {
        if ($previewFullPathUrl != $this->previewFullPathUrl) {
            $this->previewFullPathUrl = $previewFullPathUrl;
        }
    }

    /**
     * Get preview meta.
     *
     * @return array
     */
    public function getPreviewMeta()
    {
        return $this->previewMeta;
    }

    /**
     * Set preview meta.
     *
     * @param array $previewMeta.
     *
     * @return void
     */
    public function setPreviewMeta($previewMeta = Array())
    {
        if ($previewMeta != $this->previewMeta) {
            $this->previewMeta = $previewMeta;
        }
    }

    /**
     * Get flash file.
     *
     * @return string
     */
    public function getFlashFile()
    {
        return $this->flashFile;
    }

    /**
     * Set flash file.
     *
     * @param string $flashFile.
     *
     * @return void
     */
    public function setFlashFile($flashFile)
    {
        if ($flashFile != $this->flashFile) {
            $this->flashFile = $flashFile;
        }
    }

    /**
     * Get flash file full path.
     *
     * @return string
     */
    public function getFlashFileFullPath()
    {
        return $this->flashFileFullPath;
    }

    /**
     * Set flash file full path.
     *
     * @param string $flashFileFullPath.
     *
     * @return void
     */
    public function setFlashFileFullPath($flashFileFullPath)
    {
        if ($flashFileFullPath != $this->flashFileFullPath) {
            $this->flashFileFullPath = $flashFileFullPath;
        }
    }

    /**
     * Get flash file full path url.
     *
     * @return string
     */
    public function getFlashFileFullPathUrl()
    {
        return $this->flashFileFullPathUrl;
    }

    /**
     * Set flash file full path url.
     *
     * @param string $flashFileFullPathUrl.
     *
     * @return void
     */
    public function setFlashFileFullPathUrl($flashFileFullPathUrl)
    {
        if ($flashFileFullPathUrl != $this->flashFileFullPathUrl) {
            $this->flashFileFullPathUrl = $flashFileFullPathUrl;
        }
    }

    /**
     * Get flash file meta.
     *
     * @return array
     */
    public function getFlashFileMeta()
    {
        return $this->flashFileMeta;
    }

    /**
     * Set flash file meta.
     *
     * @param array $flashFileMeta.
     *
     * @return void
     */
    public function setFlashFileMeta($flashFileMeta = Array())
    {
        if ($flashFileMeta != $this->flashFileMeta) {
            $this->flashFileMeta = $flashFileMeta;
        }
    }

    /**
     * Get background colour.
     *
     * @return string
     */
    public function getBackgroundColour()
    {
        return $this->backgroundColour;
    }

    /**
     * Set background colour.
     *
     * @param string $backgroundColour.
     *
     * @return void
     */
    public function setBackgroundColour($backgroundColour)
    {
        if ($backgroundColour != $this->backgroundColour) {
            $this->backgroundColour = $backgroundColour;
        }
    }

    /**
     * Get play.
     *
     * @return boolean
     */
    public function getPlay()
    {
        return $this->play;
    }

    /**
     * Set play.
     *
     * @param boolean $play.
     *
     * @return void
     */
    public function setPlay($play)
    {
        if ($play !== $this->play) {
            $this->play = (bool)$play;
        }
    }

    /**
     * Get play loop.
     *
     * @return boolean
     */
    public function getPlayLoop()
    {
        return $this->playLoop;
    }

    /**
     * Set play loop.
     *
     * @param boolean $playLoop.
     *
     * @return void
     */
    public function setPlayLoop($playLoop)
    {
        if ($playLoop !== $this->playLoop) {
            $this->playLoop = (bool)$playLoop;
        }
    }

    /**
     * Get width.
     *
     * @return string
     */
    public function getWidth()
    {
        return $this->width;
    }

    /**
     * Set width.
     *
     * @param string $width.
     *
     * @return void
     */
    public function setWidth($width)
    {
        if ($width != $this->width) {
            $this->width = $width;
        }
    }

    /**
     * Get height.
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->height;
    }

    /**
     * Set height.
     *
     * @param string $height.
     *
     * @return void
     */
    public function setHeight($height)
    {
        if ($height != $this->height) {
            $this->height = $height;
        }
    }

    /**
     * Get player version.
     *
     * @return string
     */
    public function getPlayerVersion()
    {
        return $this->playerVersion;
    }

    /**
     * Set player version.
     *
     * @param string $playerVersion.
     *
     * @return void
     */
    public function setPlayerVersion($playerVersion)
    {
        if ($playerVersion != $this->playerVersion) {
            $this->playerVersion = $playerVersion;
        }
    }


    /**
     * Get created user id.
     *
     * @return integer[]
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }

    /**
     * Set created user id.
     *
     * @param integer[] $createdUserId.
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }

    /**
     * Get updated user id.
     *
     * @return integer[]
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }

    /**
     * Set updated user id.
     *
     * @param integer[] $updatedUserId.
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }

    /**
     * Get created date.
     *
     * @return datetime[]
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }

    /**
     * Set created date.
     *
     * @param datetime[] $createdDate.
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }

    /**
     * Get updated date.
     *
     * @return datetime[]
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }

    /**
     * Set updated date.
     *
     * @param datetime[] $updatedDate.
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }




    /**
     * Initialise validator and return it's instance.
     *
     * @return MUFlash_Entity_Validator_Movie The validator for this entity.
     */
    public function initValidator()
    {
        if (!is_null($this->_validator)) {
            return $this->_validator;
        }
        $this->_validator = new MUFlash_Entity_Validator_Movie($this);
        return $this->_validator;
    }

    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return void.
     */
    public function validate()
    {
        $result = $this->initValidator()->validateAll();
        if (is_array($result)) {
            throw new Zikula_Exception($result['message'], $result['code'], $result['debugArray']);
        }
    }

    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data.
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }

        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $dom = ZLanguage::getModuleDomain('MUFlash');
        if ($currentType == 'admin') {
            if (in_array($currentFunc, array('main', 'view'))) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'movie', 'id' => $this['id'])),
                        'icon' => 'preview',
                        'linkTitle' => __('Open preview page', $dom),
                        'linkText' => __('Preview', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'display', 'arguments' => array('ot' => 'movie', 'id' => $this['id'])),
                        'icon' => 'display',
                        'linkTitle' => str_replace('"', '', $this['title']),
                        'linkText' => __('Details', $dom)
                    );
            }

            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                if (SecurityUtil::checkPermission('MUFlash::', '.*', ACCESS_EDIT)) {

                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'movie', 'id' => $this['id'])),
                        'icon' => 'edit',
                        'linkTitle' => __('Edit', $dom),
                        'linkText' => __('Edit', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'movie', 'astemplate' => $this['id'])),
                        'icon' => 'saveas',
                        'linkTitle' => __('Reuse for new item', $dom),
                        'linkText' => __('Reuse', $dom)
                    );
                }
                if (SecurityUtil::checkPermission('MUFlash::', '.*', ACCESS_DELETE)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'delete', 'arguments' => array('ot' => 'movie', 'id' => $this['id'])),
                        'icon' => 'delete',
                        'linkTitle' => __('Delete', $dom),
                        'linkText' => __('Delete', $dom)
                    );
                }
            }
            if ($currentFunc == 'display') {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'view', 'arguments' => array('ot' => 'movie')),
                        'icon' => 'back',
                        'linkTitle' => __('Back to overview', $dom),
                        'linkText' => __('Back to overview', $dom)
                    );
            }
        }
        if ($currentType == 'user') {
            if (in_array($currentFunc, array('main', 'view'))) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'movie', 'id' => $this['id'])),
                        'icon' => 'display',
                        'linkTitle' => str_replace('"', '', $this['title']),
                        'linkText' => __('Details', $dom)
                    );
            }

            if (in_array($currentFunc, array('main', 'view', 'display'))) {
            }
            if ($currentFunc == 'display') {
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'view', 'arguments' => array('ot' => 'movie')),
                        'icon' => 'back',
                        'linkTitle' => __('Back to overview', $dom),
                        'linkText' => __('Back to overview', $dom)
                    );
            }
        }
    }




    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @see MUFlash_Entity_Movie::postLoadCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';

        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        // initialise the upload handler
        $uploadManager = new MUFlash_UploadHandler();

        $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
    if ($currentFunc != 'edit') {
        $this['title'] = ((isset($this['title']) && !empty($this['title'])) ? DataUtil::formatForDisplayHTML($this['title']) : '');
    }
    if ($currentFunc != 'edit') {
        $this['description'] = ((isset($this['description']) && !empty($this['description'])) ? DataUtil::formatForDisplayHTML($this['description']) : '');
    }
        if (!empty($this['preview'])) {
            $basePath = MUFlash_Util_Controller::getFileBaseFolder('movie', 'preview');
            $fullPath = $basePath .  $this['preview'];
            $this['previewFullPath'] = $fullPath;
            $this['previewFullPathURL'] = System::getBaseUrl() . $fullPath;

            // just some backwards compatibility stuff
            if (!isset($this['previewMeta']) || !is_array($this['previewMeta']) || !count($this['previewMeta'])) {
                // assign new meta data
                $this['previewMeta'] = $uploadManager->readMetaDataForFile($this['preview'], $fullPath);
            }
        }
        if (!empty($this['flashFile'])) {
            $basePath = MUFlash_Util_Controller::getFileBaseFolder('movie', 'flashFile');
            $fullPath = $basePath .  $this['flashFile'];
            $this['flashFileFullPath'] = $fullPath;
            $this['flashFileFullPathURL'] = System::getBaseUrl() . $fullPath;

            // just some backwards compatibility stuff
            if (!isset($this['flashFileMeta']) || !is_array($this['flashFileMeta']) || !count($this['flashFileMeta'])) {
                // assign new meta data
                $this['flashFileMeta'] = $uploadManager->readMetaDataForFile($this['flashFile'], $fullPath);
            }
        }
    if ($currentFunc != 'edit') {
        $this['backgroundColour'] = ((isset($this['backgroundColour']) && !empty($this['backgroundColour'])) ? DataUtil::formatForDisplayHTML($this['backgroundColour']) : '');
    }
        $this['play'] = (bool) $this['play'];
        $this['playLoop'] = (bool) $this['playLoop'];
    if ($currentFunc != 'edit') {
        $this['width'] = ((isset($this['width']) && !empty($this['width'])) ? DataUtil::formatForDisplayHTML($this['width']) : '');
    }
    if ($currentFunc != 'edit') {
        $this['height'] = ((isset($this['height']) && !empty($this['height'])) ? DataUtil::formatForDisplayHTML($this['height']) : '');
    }
    if ($currentFunc != 'edit') {
        $this['playerVersion'] = ((isset($this['playerVersion']) && !empty($this['playerVersion'])) ? DataUtil::formatForDisplayHTML($this['playerVersion']) : '');
    }
        $this->prepareItemActions();
        return true;
    }

    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @see MUFlash_Entity_Movie::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        // echo 'inserting a record ...';
        $this->validate();
        return true;
    }

    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see MUFlash_Entity_Movie::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        // echo 'inserted a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MUFlash_Entity_Movie::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
/*        // delete workflow for this entity
        $result = Zikula_Workflow_Util::deleteWorkflow($this);
        if ($result === false) {
            $dom = ZLanguage::getModuleDomain('MUFlash');
            return LogUtil::registerError(__('Error! Could not remove stored workflow.', $dom));
        }*/
        return true;
    }

    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MUFlash_Entity_Movie::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        // echo 'deleted a record ...';
        // initialise the upload handler
        $uploadManager = new MUFlash_UploadHandler();

        $uploadFields = array('preview', 'flashFile');
        foreach ($uploadFields as $uploadField) {
            if (empty($this->$uploadField)) {
                continue;
            }

            // remove upload file (and image thumbnails)
            $uploadManager->deleteUploadFile('movie', $this, $uploadField);
        }
        return true;
    }

    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @see MUFlash_Entity_Movie::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        // echo 'updating a record ...';
        $this->validate();
        return true;
    }

    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see MUFlash_Entity_Movie::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        // echo 'updated a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MUFlash_Entity_Movie::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        // echo 'saving a record ...';
        $this->validate();
        return true;
    }

    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MUFlash_Entity_Movie::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        // echo 'saved a record ...';
        return true;
    }

}
