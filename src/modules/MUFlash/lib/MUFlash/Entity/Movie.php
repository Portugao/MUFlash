<?php
/**
 * MUFlash.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUFlash
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Fri Jan 27 08:56:17 CET 2012.
 */

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the concrete entity class for movie entities.
 * @ORM\Entity(repositoryClass="MUFlash_Entity_Repository_Movie")
 * @ORM\Table(name="muflash_movie")
 * @ORM\HasLifecycleCallbacks
 */
class MUFlash_Entity_Movie extends MUFlash_Entity_Base_Movie
{
    // feel free to add your own methods here



    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     *
     * @ORM\PostLoad
     * @see MUFlash_Entity_Base_Movie::performPostLoadCallback()
     * @return void.
     */
    public function postLoadCallback()
    {
    	$muflashmovie = PageUtil::resetVar('muflashmovie');
    	
    	// check for version of player or not    	
    	$version = $this->getPlayerVersion();
    	if ($version == 0 || $version == '') {
    	$version = '0';
    	}
    	// set backgroundcolour
    	$colour = $this->getBackgroundColour();
    	// play or not
    	$play = $this->getPlay();
    	if ($play == 0) {
    		$play = 'false';
    	}
    	else {
    		$play = 'true';
    	}
    	// loop or not
    	$playloop = $this->getPlayLoop();
    	if ($playloop == 0) {
    		$playloop = 'false';
    	}
    	else {
    		$playloop = 'true';
    	}
    	
    	// get id of movie
    	$id = $this->getId();
    	// get title of movie
    	$title = $this->getTitle();
    	// get width
    	$width = $this->getWidth();
    	// get height
    	$height = $this->getHeight();
    	
    	$flashfile = $this->getFlashFile();
    	$host = System::getHost();
    	$url = 'http://' . $host . '/userdata/MUFlash/movies/flashfile';
    	$url2 = 'http://' . $host . '/userdata/MUFlash/movies/flashfile/' . $flashfile;
        
    	if ($muflashmovie == false) {
        $moviecode = "<script type='text/javascript' src='$url/swfobject.js'></script>";
    	}
    	else {
    		$moviecode = '';
    	}
    	
    	$moviecode .= "<script type='text/javascript'>
			var swfVersionStr = '$version';
			var xiSwfUrlStr = '';
			var flashvars = {};
			var params = {};
			params.quality = 'high';
			params.bgcolor = '$colour';
			params.play = '$play';
			params.loop = '$playloop';
			params.wmode = 'window';
			params.scale = 'showall';
			params.menu = 'false';
			params.devicefont = 'false';
			params.salign = '';
			params.allowscriptaccess = 'sameDomain';
			var attributes = {};
			attributes.id = '$id';
			attributes.name = '$title';
			swfobject.embedSWF(
				'$url2', '$title',
				'$width', '$height',
				swfVersionStr, xiSwfUrlStr,
				flashvars, params, attributes);
		</script>";

        // add the scripts to page header
        PageUtil::addVar('header', $moviecode);
        
        if ($muflashmovie == false) {
        	PageUtil::registerVar('muflashmovie', 1);
        }
        
        $this->performPostLoadCallback();
    }

    /**
     * Pre-Process the data prior to an insert operation.
     *
     * @ORM\PrePersist
     * @see MUFlash_Entity_Base_Movie::performPrePersistCallback()
     * @return void.
     */
    public function prePersistCallback()
    {
        $this->performPrePersistCallback();
    }

    /**
     * Post-Process the data after an insert operation.
     *
     * @ORM\PostPersist
     * @see MUFlash_Entity_Base_Movie::performPostPersistCallback()
     * @return void.
     */
    public function postPersistCallback()
    {
        $this->performPostPersistCallback();
    }

    /**
     * Pre-Process the data prior a delete operation.
     *
     * @ORM\PreRemove
     * @see MUFlash_Entity_Base_Movie::performPreRemoveCallback()
     * @return void.
     */
    public function preRemoveCallback()
    {
        $this->performPreRemoveCallback();
    }

    /**
     * Post-Process the data after a delete.
     *
     * @ORM\PostRemove
     * @see MUFlash_Entity_Base_Movie::performPostRemoveCallback()
     * @return void
     */
    public function postRemoveCallback()
    {
        $this->performPostRemoveCallback();
    }

    /**
     * Pre-Process the data prior to an update operation.
     *
     * @ORM\PreUpdate
     * @see MUFlash_Entity_Base_Movie::performPreUpdateCallback()
     * @return void.
     */
    public function preUpdateCallback()
    {
        $this->performPreUpdateCallback();
    }

    /**
     * Post-Process the data after an update operation.
     *
     * @ORM\PostUpdate
     * @see MUFlash_Entity_Base_Movie::performPostUpdateCallback()
     * @return void.
     */
    public function postUpdateCallback()
    {
        $this->performPostUpdateCallback();
    }

    /**
     * Pre-Process the data prior to a save operation.
     *
     * @ORM\PrePersist
     * @ORM\PreUpdate
     * @see MUFlash_Entity_Base_Movie::performPreSaveCallback()
     * @return void.
     */
    public function preSaveCallback()
    {
        $this->performPreSaveCallback();
    }

    /**
     * Post-Process the data after a save operation.
     *
     * @ORM\PostPersist
     * @ORM\PostUpdate
     * @see MUFlash_Entity_Base_Movie::performPostSaveCallback()
     * @return void.
     */
    public function postSaveCallback()
    {
        $this->performPostSaveCallback();
    }

}
